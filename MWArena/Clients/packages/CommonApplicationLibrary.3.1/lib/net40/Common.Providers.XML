<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.Providers</name>
    </assembly>
    <members>
        <member name="T:Common.Providers.StatusAuditingExtensions">
            <summary>A helper class that extends the Common.Status with a rich set of provider based logging and auditing functions.
            The auditing extensions are a set of static extension methods for IStatus and ITrackable, ITenantDataTrackable and IAuditable.
            <br/>   <img src="../icons/Common.Providers.png"/></summary>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status)">
            <summary> writes the status entries using the default audit log provider.</summary>
            <param name = "status">The status.</param>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,System.String)">
            <summary> writes the status entries using the default audit log provider.</summary>
            <param name = "status">The status.</param>
            <param name="cfgString">Custom configuration string use to override properties in some providers.</param> 
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,System.Guid)">
            <summary>
            writes the status entries using the default audit log provider.
            </summary>
            <param name="status">The status.</param>
            <param name="tracker">The tracker.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,System.Guid,System.String)">
            <summary>
            writes the status entries using the default audit log provider.
            </summary>
            <param name="status">The status.</param>
            <param name="tracker">The tracker.</param>
            <param name="cfgString">Custom configuration string use to override properties in some providers.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <param name = "status">The status.</param>
            <param name = "extData">A Dictionary&lt;String,String&gt; contating extended  log data</param>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <param name = "status">The status.</param>
            <param name = "extData">A Dictionary&lt;String,String&gt; contating extended  log data</param>
            <param name="cfgString">Custom configuration string use to override properties in some providers.</param>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,System.Guid,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Toes the audit log.
            </summary>
            <param name="status">The status.</param>
            <param name="tracker">The tracker.</param>
            <param name="extData">A Dictionary&lt;String,String&gt; contating extended  log data</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,Common.Providers.IStatusProvider)">
            <summary> writes the status entries using the designated audit log provider.   </summary>
            <param name = "status">The status.</param>
            <param name = "isp">The IStatusProvider.</param>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,Common.Providers.IStatusProvider,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            writes the status entries using the designated audit log provider with extended data.
            </summary>
            <param name="status">The status.</param>
            <param name="isp">The IStatusProvider.</param>
            <param name="extData">The ext data.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,Common.Providers.IStatusProvider,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            writes the status entries using the designated audit log provider with extended data.
            </summary>
            <param name="status">The status.</param>
            <param name="isp">The IStatusProvider.</param>
            <param name="extData">The ext data.</param>
            <param name="cfgString">Custom configuration string use to override properties in some providers.</param>
            <returns>Guid</returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog(Common.Status,Common.Providers.IStatusProvider,System.Nullable{System.Guid},System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            writes the status entries using the designated audit log provider with extended data.
            </summary>
            <param name="status">The status.</param>
            <param name="isp">The IStatusProvider.</param>
            <param name="tracker">The tracker.</param>
            <param name="extData">The ext data.</param>
            <param name="cfgString">Custom onfiguration string.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.PublishToProviders(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Common.Providers.IStatusProvider},System.String)">
            <summary>
            Publishes the status to all activated providers. Activated providers pass CheckThreshold and CheckActivity tests.
            </summary>
            <param name="status">The status.</param>
            <param name="extData">The ext data.</param>
            <param name="providerList">The provider list.</param>
            <param name="cfgString">Custom configuration string use to override properties in some providers.</param>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToAuditLog``1(Common.Status,Common.Providers.IStatusProvider,System.Nullable{System.Guid},``0,System.String)">
            <summary>
            Writes the status entries using a StatusProvider , also serializes an object of type T for later reference,indexed by its type.
            </summary>
            <typeparam name="T">A serializable Type</typeparam>
            <param name="status">The status.</param>
            <param name="isp">The isp.</param>
            <param name="typedextdata">The typed extdata object.</param>
            <param name="tracker">The tracker.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToLogTable(Common.Status)">
            <summary> writes the status entries using the SqlAuditLogProvider.   </summary>
            <param name = "status">The status.</param>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToLogTable``1(Common.Status,System.Nullable{System.Guid},``0)">
            <summary>
            writes the status entries using the SqlAuditLogProvider adding a serized object entry in the Audit_Log_Ext table
            </summary>
            <typeparam name="T">A serializable Type</typeparam>
            <param name="status">The status.</param>
            <param name="tracker">The tracker.</param>
            <param name="typedextdata">The typed extdata object.</param>
            <returns>Guid</returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToLogTable(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> writes the status entries using the SqlAuditLogProvider with extended data.   </summary>
            <param name = "status">The status.</param>
            <param name = "extData">A Dictionary&lt;String,String&gt; contating extended  log data</param>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToLogFile(Common.Status)">
            <summary> writes the status entries to the audit log.   </summary>
            <param name = "status">The status.</param>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToLogFile(Common.Status,System.Nullable{System.Guid},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            writes the status entries to the audit log with extended data.
            </summary>
            <param name="status">The status.</param>
            <param name="tracker">The tracker.</param>
            <param name="extData">A Dictionary&lt;String,String&gt; contating extended  log data.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusAuditingExtensions.ToLogFile``1(Common.Status,System.Nullable{System.Guid},``0)">
            <summary>
            writes the status entries using the SqlAuditLogProvider adding a serized object entry in the Audit_Log_Ext table
            </summary>
            <typeparam name="T">A serializable Type</typeparam>
            <param name="status">The status.</param>
            <param name="tracker">The tracker.</param>
            <param name="typedextdata">The typed extdata object.</param>
            <returns></returns>
        </member>
        <member name="T:Common.Providers.ITrackableAuditingExtensions">
            <summary>A helper class that extends the Common.ITrackable
             with a rich set of logging and auditing functions.</summary>
        </member>
        <member name="M:Common.Providers.ITrackableAuditingExtensions.LogStatus(Common.ITrackable,Common.Providers.IStatusProvider,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary> Publishes the Itrackable.Status to the designated IStatusProvider.   </summary>
            <param name = "tracked">The Class implementing ITrackable.</param>
            <param name = "isp">The isp.</param>
            <param name = "extData">A Dictionary&lt;String,String&gt; contating extended  log data.</param>
            <param name = "cfgString">A custom configuration string used by some providers</param> 
        </member>
        <member name="M:Common.Providers.ITrackableAuditingExtensions.LogStatus(Common.ITrackable,Common.Providers.IStatusProvider)">
            <summary>
            Publishes the Itrackable.Status to the designated IStatusProvider.
            </summary>
            <param name="tracked">The Class implementing ITrackable.</param>
            <param name="isp">The isp.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.ITrackableAuditingExtensions.LogStatus(Common.ITrackable)">
            <summary> Publishes the Itrackable.Status to the default IStatusProvider.   </summary>
            <param name = "tracked">The tracked.</param>
        </member>
        <member name="M:Common.Providers.ITrackableAuditingExtensions.LogStatus(Common.ITrackable,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Publishes the Itrackable.Status to the IStatusProvider with extended data.   </summary>
            <param name = "tracked">The Class implementing ITrackable.</param>
            <param name = "extData">A Dictionary&lt;String,String&gt; contating extended  log data.</param>
        </member>
        <member name="M:Common.Providers.ITrackableAuditingExtensions.LogStatus(Common.ITrackable,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary> Publishes the Itrackable.Status to the IStatusProvider with extended data and  a custom configuration string. .   </summary>
            <param name = "tracked">The Class implementing ITrackable.</param>
            <param name = "extData">A Dictionary&lt;String,String&gt; contating extended  log data.</param>
            <param name = "cfgString">A custom configuration string used by some providers</param>
        </member>
        <member name="M:Common.Providers.ITrackableAuditingExtensions.LogStatus(Common.ITrackable,System.String)">
            <summary> Publishes the Itrackable.Status to the IStatusProvider with a custom configuration string.   </summary>
            <param name = "tracked">The Class implementing ITrackable.</param>
            <param name = "cfgString">A custom configuration string used by some providers</param>
        </member>
        <member name="M:Common.Providers.ITrackableAuditingExtensions.StatusUpdate(Common.ITrackable,System.Int32,System.String)">
            <summary> Updates the status of the class implementing ITrackable.   </summary>
            <param name = "tracked">The Class implementing ITrackable..</param>
            <param name = "commonCode">The integer of code from the Common.Codes list.</param>
            <param name = "msg">The message associating the status change.</param>
        </member>
        <member name="M:Common.Providers.ITrackableAuditingExtensions.StatusFromException(Common.ITrackable,System.Exception)">
            <summary> Updates the status of the class implementing ITrackable.   </summary>
            <param name = "tracked">The Class implementing ITrackable..</param>
            <param name = "ex">The ex.</param>
        </member>
        <member name="T:System.Web.UI.SystemWebUiExtensions">
            <summary>
            Class SystemWebUiExtensions
            </summary>
        </member>
        <member name="M:System.Web.UI.SystemWebUiExtensions.GetPageInfo``1(``0)">
            <summary>
            Gets the page info.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="page">The page.</param>
            <returns>Dictionary{System.StringSystem.String}.</returns>
        </member>
        <member name="T:Common.Providers.Interfaces.IAuditablePage">
            <summary>Extends IAuditable for Web Pages to automatically gather logging info </summary>
        </member>
        <member name="M:Common.Providers.Interfaces.IAuditablePage.GetPageInfo">
            <summary>
            Gets the web page information for logging.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Common.Providers.Interfaces.IAuditablePage.DebugMode">
            <summary>
            Gets or sets a value indicating whether [debug mode] is on or off.
            </summary>
            <value><c>true</c> if [debug mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Common.Providers.IStatusProvider">
            <summary>Interface required to publish the status object</summary>
        </member>
        <member name="M:Common.Providers.IStatusProvider.Publish(Common.Status)">
            <summary>Primary Method for publishing the Status to a Provider</summary>
        </member>
        <member name="M:Common.Providers.IStatusProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Method for persisting the status to a log and extended data to the audit_log_ext table</summary>
            <param name="status">The <see cref="T:Common.Status">Status</see>.</param>
            <param name="extData">The Dictionary&lt;String,String&gt; of external data.</param>
            <example>
              <code source="..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines="true" keepSeeTags="true" region="Common.Providers.IStatusProvider Example 1" lang="C#" title="Example #1"/>
            </example>
        </member>
        <member name="M:Common.Providers.IStatusProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>Method for persisting the status to a log and extended data to the audit_log_ext table</summary>
            <param name="status">The <see cref="T:Common.Status">Status</see>.</param>
            <param name="extData">The Dictionary&lt;String,String&gt; of external data.</param>
            <param name="cfgString">custom configuration string to override internal provider settings. In the SQLLogTableProvider this is used as the conn string if present.</param>
            <example>
              <code source="..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines="true" keepSeeTags="true" region="Common.Providers.IStatusProvider Example 1" lang="C#" title="Example #1"/>
            </example>
        </member>
        <member name="P:Common.Providers.IStatusProvider.TransactionId">
            <summary>Gets or sets the unique transaction id that relates a provider batch.</summary>
        </member>
        <member name="E:Common.Providers.IStatusProvider.Publishing">
            <summary>MUST BE FIRED IN PUBLISH METHOD(s) - base.OnPublishing() <para>Occurs when the provider is [publishing] Status content to the destination..</para></summary>
        </member>
        <member name="T:Common.Providers.ProviderMonitor">
            <summary>Static Counter of messages being published in the last 10 seconds</summary>
        </member>
        <member name="F:Common.Providers.ProviderMonitor._ProviderActivitySet">
            <summary>Dictionary to store a list of OnPublish timestamps for each Provider in the (web|app).config </summary>
        </member>
        <member name="M:Common.Providers.ProviderMonitor.#cctor">
            <summary>
            Initializes the <see cref="T:Common.Providers.ProviderMonitor"/> class and the _ProviderActivitySet field.
            </summary>
        </member>
        <member name="M:Common.Providers.ProviderMonitor.InitializeProviderActivitySet(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.DateTime}})">
            <summary>Initializes the provider activity set. with one entry per Provider in the (web|app).config </summary>
            <param name="providerActivitySet">The provider activity set.</param>
        </member>
        <member name="M:Common.Providers.ProviderMonitor.Earliest">
            <summary>returns the earliest acceptable time for the activitylist</summary>
        </member>
        <member name="M:Common.Providers.ProviderMonitor.CheckActivity``1(``0)">
            <summary>Checks the Activity and returns true if we are under the Throttle limit.</summary>
        </member>
        <member name="M:Common.Providers.ProviderMonitor.CheckActivity(System.String)">
            <summary>Checks the Activity and returns true if we are under the Throttle limit.</summary>
        </member>
        <member name="M:Common.Providers.ProviderMonitor.CheckThreshold(System.String,System.Int32)">
            <summary>Checks the Status.StatusCode and returns true if it is over the IStatusProvider.Threshold unless the Status.StatusCode is a custom code (>1000) in which case it must match the threshold for that provider.</summary>
        </member>
        <member name="T:Common.Providers.GenericEventHandler`1">
            <summary>Type parameter eventHandler</summary>
        </member>
        <member name="T:Common.Providers.StatusProviderBase">
            <summary>Provides shared functionality for Status Logging Providers </summary>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.OnPublishing``1(``0)">
            <summary>Called when the provider is [publishing] Status content to the destination.</summary>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Common.Providers.StatusProviderBase"/> class. 
            <para>Initializes a random TransactionId. Sets the ProviderConfig property to an 
            instance of the complementary StatusProviderElement. Attach Publishing eventHandler
             for the ProviderMonitor.</para></summary>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.#ctor(System.Guid)">
            <summary>Initializes a new instance of the <see cref="T:Common.Providers.StatusProviderBase"/> class. 
            <para>Initializes the TransactionId to the Guid assigned. Sets the ProviderConfig property to an 
            instance of the complementary StatusProviderElement. Attach Publishing eventHandler
             for the ProviderMonitor.</para></summary>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.SetProviderConfig(System.String)">
            <summary>Sets the provider config (IStatusProviderElement) by reflecting on the Provider type.</summary>
            <param name="typename">The type name of the Provider whose complementary StatusProviderElement needs to be instantiated.</param>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.GetProviderConfig``1(``0)">
            <summary>Returns the provider config (IStatusProviderElement) by reflecting on the Provider type.</summary>
            <param name="typename">The type name of the Provider whose complementary StatusProviderElement needs to be instantiated.</param>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Primary Method for a provider to publishing the Status contents and associated data to a destination. <para>For throttling you must call OnPublishing() in this method of the derived class</para> </summary>
            <example><code source = "..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines = "true" keepSeeTags = "true" region = "Common.Providers.IStatusProvider Publish" lang = "C#" title = "Example #1" /></example>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.Publish(Common.Status)">
            <summary> Primary Method for a provider to publishing the Status contents to a destination.  </summary>
            <example><code source = "..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines = "true" keepSeeTags = "true" region = "Common.Providers.IStatusProvider Publish" lang = "C#" title = "Example #1" /></example>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary> Primary Method for a provider to publishing the Status contents and associated data to a destination using a custom configuration string<para>For throttling you must call OnPublishing() in this method of the derived class</para> </summary>
            <example><code source = "..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines = "true" keepSeeTags = "true" region = "Common.Providers.IStatusProvider Publish" lang = "C#" title = "Example #1" /></example>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.CheckThreshold(Common.Status)">
            <summary>Checks the Status.StatusCode and returns true if it is over the IStatusProvider.Threshold unless the Status.StatusCode is a custom code (>1000) in which case it must match the threshold for that provider.</summary>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.CheckThreshold(System.Int32)">
            <summary>Checks the Status.StatusCode and returns true if it is over the IStatusProvider.Threshold unless the Status.StatusCode is a custom code (>1000) in which case it must match the threshold for that provider.</summary>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.CheckThreshold``1(``0,System.Int32)">
            <summary>Checks the Status.StatusCode and returns true if it is over the IStatusProvider.Threshold unless the Status.StatusCode is a custom code (>1000) in which case it must match the threshold for that provider.</summary>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.CheckActivity``1(``0)">
            <summary>Checks the Activity and returns true if we are under the Throttle limit.</summary>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.GetStatusConfig">
            <summary>  Gets the Common.Configuration.StatusConfiguration &lt;commonConfiguration&gt; in web.config </summary>
            <returns>Common.Configuration.StatusConfiguration</returns>
        </member>
        <member name="M:Common.Providers.StatusProviderBase.GetSettings">
            <summary> Gets the Common.Configuration settings from the web.config  </summary>
        </member>
        <member name="P:Common.Providers.StatusProviderBase.ThrottleTimer">
            <summary>Gets or sets the throttle timer. Used to throttle the processing of provider messages. </summary>
            <value>The throttle timer.</value>
        </member>
        <member name="P:Common.Providers.StatusProviderBase.ProviderConfig">
            <summary> Gets or sets the provider configurations for Throttle and Threshold.</summary>
        </member>
        <member name="E:Common.Providers.StatusProviderBase.Publishing">
            <summary>MUST BE FIRED IN PUBLISH METHOD(s) - base.OnPublishing() <para>Occurs when the provider is [publishing] Status content to the destination..</para></summary>
        </member>
        <member name="P:Common.Providers.StatusProviderBase.TransactionId">
            <summary>Gets or sets the transaction id.</summary>
            <value>The transaction id.</value>
        </member>
        <member name="P:Common.Providers.StatusProviderBase.ProviderSettings">
            <summary>Retrieve a dictionary of configuration settings for the Log provider</summary>
        </member>
        <member name="M:Common.Providers.StatusProviderPublishedEventArgs.#ctor(System.Guid,System.String)">
            <summary> Initializes a new instance of the StatusPublishedEventArgs from  <see cref="T:Common.StatusChangedEventArgs"/> and a Guid.</summary>
            <param name="transactionId">The IStatusProvider TransactionId</param>
        </member>
        <member name="P:Common.Providers.StatusProviderPublishedEventArgs.TransactionId">
            <summary>Gets the transaction id (tracker). </summary>
            <value>The transaction id.</value>
        </member>
        <member name="P:Common.Providers.StatusProviderPublishedEventArgs.UCTypename">
            <summary>Gets the uppercase typename. </summary>
            <value>The uc typename.</value>
        </member>
        <member name="M:Common.Providers.StatusPublishedEventArgs.#ctor(System.Guid,Common.StatusChangedEventArgs)">
            <summary> Initializes a new instance of the StatusPublishedEventArgs from  <see cref="T:Common.StatusChangedEventArgs"/> and a Guid.</summary>
            <param name="transactionId">The IStatusProvider TransactionId</param>
        </member>
        <member name="T:Common.Providers.AutoAuditingPage">
            <summary>
            Common.IStatusProviderAuto Auditing Base Page
            </summary>
        </member>
        <member name="M:Common.Providers.AutoAuditingPage.OnStatusChanged(System.Object,Common.StatusChangedEventArgs)">
            <summary>Handle the StatusCodeChange event by logging to the default provider</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Common.StatusChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Common.Providers.AutoAuditingPage.GetPageInfo">
            <summary>
            Gets the web page information for logging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.AutoAuditingPage.Page_PreInit(System.Object,System.EventArgs)">
            <summary>Initialize Status object before the page_init.<para>Attaches StatusCodeChange event handler to publish the status to the default logging provider </para></summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Common.Providers.AutoAuditingPage.Page_PreRenderComplete(System.Object,System.EventArgs)">
            <summary>
            Handles the PreRenderComplete event of the Page control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Common.Providers.AutoAuditingPage.OnStatusPublished(System.Object,Common.Providers.StatusPublishedEventArgs)">
            <summary>Handle the Provider published event by logging to the default provider</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Common.Providers.StatusPublishedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Common.Providers.AutoAuditingPage.Tracker">
            <summary> Gets or sets a Unigue Instance Identifier for tracking the objects activities.   </summary>
        </member>
        <member name="P:Common.Providers.AutoAuditingPage.Status">
            <summary>Provides a current reference to the object's internal or private Common.Status field</summary>
            <returns>a Common Status</returns>
        </member>
        <member name="E:Common.Providers.AutoAuditingPage.StatusChanged">
            <summary> Occurs whenever a Common.Status.StatusCode is Changed.
            generates StatusChangedEventArgs: OldStatusCode, NewStatusCode, Message [queued event is raised].   </summary>
        </member>
        <member name="P:Common.Providers.AutoAuditingPage.DebugMode">
            <summary>
            Gets or sets a value indicating whether [debug mode] is on or off.
            </summary>
            <value><c>true</c> if [debug mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Common.Providers.AutoAuditingPage.StatusPublished">
            <summary>  Occurs whenever a Common.Status.StatusCode is Changed. enerates StatusChangedEventArgs: OldStatusCode, NewStatusCode, Message [queued event is raised]. </summary>
        </member>
        <member name="T:Common.Providers.Extensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Common.Providers.Extensions.Publish``1(Common.Providers.IStatusProvider,Common.Status,``0)">
            <summary> Primary Method for persisting serializable type </summary>
        </member>
        <member name="M:Common.Providers.Extensions.Publish``1(Common.Providers.IStatusProvider,Common.Status,``0,System.Xml.Linq.XName)">
            <summary> Primary Method for persisting an object the log along with an optional XName parameter to designate an enner Element to unwrap.</summary>
        </member>
        <member name="M:Common.Providers.Extensions.Publish``2(Common.Providers.IStatusProvider,Common.Status,``0)">
            <summary> Method for persisting a child type from an object the log </summary>
        </member>
        <member name="M:Common.Providers.Extensions.CheckThreshold(Common.Providers.IStatusProvider,System.Int32)">
            <summary> Checks the Istatus provider threshold against the current status code. </summary>
            <param name="provider">The provider.</param>
            <param name="statusCode">The status code.</param>
            <returns></returns>
        </member>
        <member name="T:Common.Providers.audit_log_v2">
            <summary>Log Entry class</summary>
        </member>
        <member name="F:Common.Providers.audit_log_v2.timestamp">
            <summary>internal datetime</summary>
        </member>
        <member name="M:Common.Providers.audit_log_v2.Ondatetime_stampChanged">
            <summary>Called when [changed].</summary>
        </member>
        <member name="P:Common.Providers.audit_log_v2.time_stamp">
            <summary>serialization friendly version of the datetime_stamp</summary>
        </member>
        <member name="T:Common.Providers.QueuedEventProvider">
            <summary>Very Basic Queued Event Provider for the Common.Status object</summary>
        </member>
        <member name="M:Common.Providers.QueuedEventProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.QueuedEventProvider"/> class.
            </summary>
        </member>
        <member name="M:Common.Providers.QueuedEventProvider.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.QueuedEventProvider"/> class.
            </summary>
            <param name="transactionId"></param>
        </member>
        <member name="M:Common.Providers.QueuedEventProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary> Primary Method for persisting the status to a log  with a custom config string </summary>
        </member>
        <member name="M:Common.Providers.QueuedEventProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>Cached Paramters for queued Event call, to enable 10 sec pause if the provider throttle kicks in 
            private List&lt;SqlParameter &gt;parms;
            Primary method for a provider to publish the status contents to a destination.</summary>
             <param name="status"></param>
             <param name="extData"></param>
        </member>
        <member name="T:Common.Providers.SmtpMailProvider">
            <summary>
            Class SmtpMailProvider
            </summary>
        </member>
        <member name="M:Common.Providers.SmtpMailProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.SmtpMailProvider"/> class.
            </summary>
        </member>
        <member name="M:Common.Providers.SmtpMailProvider.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.SmtpMailProvider"/> class.
            </summary>
            <param name="transactionId">The transaction id.</param>
        </member>
        <member name="F:Common.Providers.SmtpMailProvider._connstring">
            <summary>
            The _connstring
            </summary>
        </member>
        <member name="M:Common.Providers.SmtpMailProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Primary Method for persisting the status to a log  with a custom config string
            </summary>
            <param name="status">The status.</param>
            <param name="extData">The ext data.</param>
            <param name="connstring">The connstring.</param>
        </member>
        <member name="M:Common.Providers.SmtpMailProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Primary Method for a provider to publishing the Status contents and associated data to a destination. <para>For throttling you must call OnPublishing() in this method of the derived class</para>
            </summary>
            <param name="status">The <see cref="T:Common.Status">Status</see>.</param>
            <param name="extData">The Dictionary&lt;String,String&gt; of external data.</param>
            <exception cref="T:System.Data.NoNullAllowedException">Status object cannnot be null when attempting to publish via (IStatusProvider) SmtpMailProvider</exception>
            <example><code source="..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines="true" keepSeeTags="true" region="Common.Providers.IStatusProvider Publish" lang="C#" title="Example #1"/></example>
        </member>
        <member name="M:Common.Providers.SmtpMailProvider.Publish(Common.Status)">
            <summary>
            Primary Method for a provider to publishing the Status contents to a destination.
            </summary>
            <param name="status">The status.</param>
            <example><code source="..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines="true" keepSeeTags="true" region="Common.Providers.IStatusProvider Publish" lang="C#" title="Example #1" /></example>
        </member>
        <member name="T:Common.Providers.SqlLogtableProvider">
            <summary>
            A SQL server Provider for Audit Logging
            </summary>
        </member>
        <member name="M:Common.Providers.SqlLogtableProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.SqlLogtableProvider"/> class.
            </summary>
        </member>
        <member name="M:Common.Providers.SqlLogtableProvider.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.SqlLogtableProvider"/> class.
            </summary>
            <param name="transactionId">The transaction id.</param>
        </member>
        <member name="F:Common.Providers.SqlLogtableProvider._connstring">
            <summary>
            The _connstring
            </summary>
        </member>
        <member name="M:Common.Providers.SqlLogtableProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Primary Method for persisting the status to a log  with a custom config string
            </summary>
            <param name="status">The status.</param>
            <param name="extData">The ext data.</param>
            <param name="connstring">The connstring.</param>
        </member>
        <member name="M:Common.Providers.SqlLogtableProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Primary Method for persisting the status to a log
            </summary>
            <param name="status">The <see cref="T:Common.Status">Status</see>.</param>
            <param name="extData">The Dictionary&lt;String,String&gt; of external data.</param>
            <example><code source="..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines="true" keepSeeTags="true" region="Common.Providers.IStatusProvider Publish" lang="C#" title="Example #1"/></example>
        </member>
        <member name="T:Common.Providers.StatusProviderFactory">
            <summary>Factory class for generating StatusProviderBase and IStatusProvider instances</summary>
        </member>
        <member name="M:Common.Providers.StatusProviderFactory.GetDefaultStatusProvider">
            <summary>
            Gets the default status provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusProviderFactory.GetIsp(System.String)">
            <summary>
            Gets the new IStatusProvider instance by Name.
            </summary>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusProviderFactory.GetIsp(System.String,System.Nullable{System.Guid})">
            <summary>
            Gets the new IStatusProvider instance by Name. with the assigned tracker
            </summary>
            <param name="providerName">Name of the provider.</param>
            <param name="tracker">The tracker.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.StatusProviderFactory.GetTriggeredProvider(System.String)">
            <summary>
            Gets the provider that should be triggered when other providers fail.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Common.Providers.W3cLogFileProvider">
            <summary>
            Class W3cLogFileProvider
            </summary>
        </member>
        <member name="M:Common.Providers.W3cLogFileProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Primary Method for a provider to publishing the Status contents and associated data to a destination. <para>For throttling you must call OnPublishing() in this method of the derived class</para>
            </summary>
            <param name="status">The <see cref="T:Common.Status">Status</see>.</param>
            <param name="extData">The Dictionary&lt;String,String&gt; of external data.</param>
            <example><code source="..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines="true" keepSeeTags="true" region="Common.Providers.IStatusProvider Publish" lang="C#" title="Example #1"/></example>
        </member>
        <member name="M:Common.Providers.W3cLogFileProvider.Publish(Common.Status)">
            <summary>
            Primary Method for a provider to publishing the Status contents to a destination.
            </summary>
            <param name="status">The status.</param>
            <example><code source="..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines="true" keepSeeTags="true" region="Common.Providers.IStatusProvider Publish" lang="C#" title="Example #1" /></example>
        </member>
        <member name="M:Common.Providers.W3cLogFileProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Publishes the specified status.
            </summary>
            <param name="status">The status.</param>
            <param name="extData">The ext data.</param>
            <param name="connstring">The connstring.</param>
        </member>
        <member name="M:Common.Providers.W3cLogFileProvider.GetSettings">
            <summary>
            Gets the Common.Configuration settings from the web.config
            </summary>
            <returns>Dictionary{System.StringSystem.String}.</returns>
        </member>
        <member name="T:Common.Providers.WindowsEventProvider">
            <summary>
            Class WindowsEventProvider
            </summary>
        </member>
        <member name="M:Common.Providers.WindowsEventProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.WindowsEventProvider"/> class.
            </summary>
        </member>
        <member name="M:Common.Providers.WindowsEventProvider.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.WindowsEventProvider"/> class.
            </summary>
            <param name="transactionId">The transaction id.</param>
        </member>
        <member name="F:Common.Providers.WindowsEventProvider._connstring">
            <summary>
            The _connstring
            </summary>
        </member>
        <member name="M:Common.Providers.WindowsEventProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Primary Method for persisting the status to a log  with a custom config string
            </summary>
            <param name="status">The <see cref="T:Common.Status">Status</see>.</param>
            <param name="extData">The Dictionary&lt;String,String&gt; of external data.</param>
            <param name="cfgString">custom configuration string to override internal provider settings. In the SQLLogTableProvider this is used as the conn string if present.</param>
            <example><code source="..\Demo\Common.Providers.Test\CommonProvidersTestHelper.cs" numberLines="true" keepSeeTags="true" region="Common.Providers.IStatusProvider Publish" lang="C#" title="Example #1"/></example>
        </member>
        <member name="M:Common.Providers.WindowsEventProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Primary Method for a provider to publishing the Status contents and associated data to a destination. <para>For throttling you must call OnPublishing() in this method of the derived class</para>
            </summary>
            <param name="status">The <see cref="T:Common.Status">Status</see>.</param>
            <param name="extData">The Dictionary&lt;String,String&gt; of external data.</param>
            <example>  <code source="..\demo\Common.Providers.Test\WindowsEventProviderTest.cs" lang="c#" title="Publishing a status with the WindowsEventProvider" numberLines="true" keepSeeTags="true" region="e.g. WindowsEventProvider.Publish"/></example>
        </member>
        <member name="M:Common.Providers.WindowsEventProvider.Pub(System.String,System.String,System.String,Common.Constants.Assessment,System.Int32,System.String)">
            <summary>
            Pubs the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="machineName">Name of the machine.</param>
            <param name="message">The message.</param>
            <param name="assessment">The assessment.</param>
            <param name="eventid">The eventid.</param>
            <param name="eventLog">The event log.</param>
        </member>
        <member name="T:Common.Providers.XmlLogfileProvider">
            <summary> A LogFile Provider for Audit Logging </summary>
        </member>
        <member name="M:Common.Providers.XmlLogfileProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.XmlLogfileProvider"/> class.
            </summary>
        </member>
        <member name="M:Common.Providers.XmlLogfileProvider.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Common.Providers.XmlLogfileProvider"/> class.
            </summary>
            <param name="transactionId"></param>
        </member>
        <member name="M:Common.Providers.XmlLogfileProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary> Primary Method for persisting the status to a log  with a custom config string </summary>
        </member>
        <member name="M:Common.Providers.XmlLogfileProvider.Publish(Common.Status,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary> Primary Method for persisting the status to a log   </summary>
        </member>
        <member name="M:Common.Providers.XmlLogfileProvider.GetLogPath">
            <summary>Gets the path logs  are written to.</summary>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.XmlLogfileProvider.GetlogDirectory">
            <summary>Get the directory logs  are written to.</summary>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.XmlLogfileProvider.GetLogEntry(Common.Status,System.Guid)">
            <summary> Gets the log entry. </summary>
            <param name="status">The status.</param>
            <param name="transactionId">The transaction id.</param>
            <returns></returns>
        </member>
        <member name="M:Common.Providers.XmlLogfileProvider.GetLogEntry(Common.Status.StatusChange,System.Guid)">
            <summary> Gets the log entry. </summary>
            <param name="statusChange">The status change.</param>
            <param name="transactionId">The transaction id.</param>
            <returns></returns>
        </member>
    </members>
</doc>
